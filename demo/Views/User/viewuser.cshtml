@model IEnumerable<demo.Models.regModel>

@using System.Diagnostics

@{
    ViewBag.Title = "get";
    ViewData["Title"] = "viewuser";


}
<head>
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
 
        * {
        box-sizing: border-box;
        }
         .Verif{
              background-color: #65a8eb !important;
       

         }
        .btn-primary {
    color: #000;
    background-color: #65a8eb;
        border:#65a8eb;}


        body {
        margin: 0;
        padding: 0;
        background: #fff;
        font-family: Raleway;
        text-transform: uppercase;
        font-size: 11px;
        }

        h1 {
        margin: 0;
        }


table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 10px;
  border: 1px solid #ccc;
  text-align: center;
}

th:nth-child(1),
th:nth-child(2),
td:nth-child(1),
td:nth-child(2) {
  position: sticky;
  left: 0;
  background-color: #fff;
  z-index: 9;
}

.toggle-button {
  position: fixed;
  top: 10px;
  left: 10px;
  padding: 5px 10px;
  background-color: #007BFF;
  color: white;
  border: none;
  cursor: pointer;
  z-index: 10;
}

.hidden {
  display: none;
}




        .contact {
        -webkit-user-select: none; /* Chrome/Safari */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+ */
        margin: 1em auto;
        width: 100px;
        height: 30px;
        line-height: 13px;
         background-color: #348feb;
        color: white;
        font-weight: 700;
        text-align: center;
        cursor: pointer;
        border: 1px solid white;
        }

        .contact:hover {
        background: #666;
        }

        .contact:active {
        background: #444;
        }

        .contactForm {
        display: none;
        border: 6px solid  #55ff88;
        padding: 2em;
        width: 500px; /* Adjust width as needed */
        height: 500px;

        background: #fff;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        -webkit-transform: translate(-50%,-50%)
        }

        input, textarea {
        margin: .8em auto;
        font-family: inherit;
        text-transform: inherit;
        font-size: inherit;
        display: block;
        width: 280px;
        padding: .4em;
        }

        textarea {
        height: 80px;
        resize: none;
        }
        tr {
    margin-bottom: 1px; /* Adjust the margin to decrease space between rows */
}
        .formBtn {
        width: 140px;
        display: inline-block;
        background: teal;
        color: #fff;
        font-weight: 100;
        font-size: 1.00em;
        border: none;
        height: 30px;
        }
     
        .Btn{

        }
        .verifyPopup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        -webkit-transform: translate(-50%, -50%);
        background: #fff;
        border: 6px solid #55ff88; /* Adjust border color as needed */
        padding: 2em;
        width: 500px; /* Adjust width as needed */
        height: 500px; /* Adjust height as needed */
        z-index: 1000;
        text-align: center; /* Align content center */
    }

    .verifyPopup h1 {
        margin: 0;
        font-size: 24px;
        margin-bottom: 72px;
    }

    .verifyPopup label {
        display: block;
        margin-bottom: 5px;
        text-align: left; /* Align labels left */
        margin-top: 18px;
    }

    .verifyPopup input[type="text"],
    .verifyPopup input[type="number"],
    .verifyPopup input[type="date"] {
        width: calc(100% - 20px); /* Adjust width to fit container */
        padding: 10px;
        font-size: 16px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin: 0 auto; /* Center input fields */
        display: block;
    }

    .verifyPopup button {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 20px; /* Add space between input fields and button */
    }

    .verifyPopup button:hover {
        background-color: #0056b3;
    }

   .inline-label-input {
        display: flex;
        align-items: center;
    }
    .inline-label-input label {
        margin-right: 4px; /* Minimal space between label and input */
    }






    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"> </script>
    <link rel="stylesheet" href="path/to/font-awesome/css/all.min.css">
    @* <link rel="stylesheet" href="~/Login_v16/css/css_final.css"> *@
    
    <script src="~/Login_v16/css/f"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">


     <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>




</head>

<body>

     


    <!-- Page Heading -->
  @*   <h1 align="center" class="h3 mb-2 text-gray-800">Registered Users</h1>
 *@

    <div class="card shadow mb-4">

        <div class="card-header py-3">

            <h6 class="m-0 font-weight-bold text-primary"> <a href="/Register/Index">Create New User</a><br><br>
                Terms :
                <select id="termSelect" value="@ViewBag.seleceterdterm.TermId" style="padding: 5px;border-radius: 5px;
    padding: 8px 15px; 
    border: 1px solid #ccc; 
    font-size: 14px; 
    background-color: #fff;">
                    @if (ViewBag.TermsListt != null)
                    {
                        @foreach (var terms in ViewBag.TermsListt)
                        {
                            <option value="" disabled selected>Select Term</option>
                        }

                    }
                    @if (ViewBag.TermsList != null)
    {
   @foreach (var term in ViewBag.TermsList)
    {
                            if (ViewBag.seleceterdterm.TermId==term.TermId)
                            {
                                 <option value="@term.TermId" data-amount="@term.amount" selected>@term.Term</option>
                            }
                            else
                            {
                                 <option value="@term.TermId" data-amount="@term.amount">@term.Term</option>
                            }
                           
    }
    }
    else
    {
        <option>No terms available</option>
    }
                    </select>

                  
<label for="wardFilter">Filter by Ward:</label>
<select id="wardFilter" onchange="filterTable()">
    <option value="">--Select Ward--</option>
    @foreach (var ward in ViewBag.wd)
    {
        <option value="@ward.Id">@ward.Wardno - @ward.Wardname</option>
    }
</select>
<label for="statusFilter">Filter by Status:</label>
<select id="statusFilter" onchange="filterStatus()">
    <option value="">All</option>
    <option value="verified">Verified</option>
    <option value="pending">Pending</option>
    <option value="verify">Unverified</option>
</select>
@*  <button onclick="exportTableToExcel()"><i class="fas fa-file-excel" style="color: green; background-color: white;"></i></button> *@

@*   <label for="searchInput">Search:</label> 
  <input type="text" id="searchInput" placeholder="Search by name or other fields" onkeyup="filterTable()" /> *@
  @*  <div class="inline-label-input"> *@
    @* <label for="searchInput">Search:</label> *@
    <input type="text" id="searchInput" placeholder="Search by name or other fields" onkeyup="filterTable()" />

@* </div> *@

                        </div>

     <div class="card-body">
         <button onclick="exportTableToExcel()" style="font-size: 24px; padding: 10px 20px; border: 1px; background-color: white; cursor: pointer;">
    <i class="fas fa-file-excel" style="color: green;"></i>
</button>
                            <div class="table-responsive .table-container">
                    <div x-data="{ showAlert: function() { alert('hi'); } }">
            <div style="height: 60vh; width: 100%; overflow-x: auto; overflow-y: auto;">
               
  <table class="table table-bordered" id="dataTable" style="min-width: 1500px; width: 100%; border-collapse: collapse;">
      <button id="toggle-button" class="toggle-button">←</button>
    <thead style="position: sticky; top: 0; background-color: white; z-index: 1;">
        
                                        @* <tr><a id="add" asp-action="Create" class="button">Create New</a></tr> *@
                                        <tr>
                                            <th >
                                                
                                                Registration Id
                                            
                                            </th>
                                           @*  <th >
                                                @Html.DisplayNameFor(model => model.FirstName)
                                            </th> *@
                                            <th >
                                                @* @Html.DisplayNameFor(model => model.LastName) *@
                                                Name
                                            </th>
                                            <th >
                                                @Html.DisplayNameFor(model => model.Address)
                                            </th>
                                            <th >Ward</th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.City)
                                            </th>
                                            <th >
                                                @Html.DisplayNameFor(model => model.Country)
                                            </th>
                                            <th >
                                                @Html.DisplayNameFor(model => model.Phone)
                                            </th>
                                            <th style="word-wrap" >
                                               Residence Number
                                             </th>
                                            <th >
                                              @Html.DisplayNameFor(model => model.Gender)
                                            </th>
                                           @*  <th>
                                                    @Html.DisplayNameFor(model => model.userImage)
                                            </th> *@
                                            <th >
                                                Age

                                            </th>
                                        <th >
                                          Date Of Birth

                                           </th>
                                           
                                          @*  <th ></th> *@
                                            @* <th ></th> *@
                                           @*  <th ></th> *@
                                          @*   <th ></th> *@
                                           @*  <th >Id Card</th>
                                            <th>Health card</th> *@
                                        </tr>
                                    </thead>
                                    <tbody>
                @foreach (var item in Model)
                    {

                       
            var userExistsDict = ViewBag.UserExists as Dictionary<string, bool>;
            var userVerificationDict = ViewBag.UserVerification as Dictionary<string, bool>;

            bool paymentExists = userExistsDict?.ContainsKey(item.Id.ToString()) == true && userExistsDict[item.Id.ToString()];
            bool paymentVerified = userVerificationDict?.ContainsKey(item.Id.ToString()) == true && userVerificationDict[item.Id.ToString()];
            string status = paymentExists && paymentVerified ? "verified" :
                            paymentExists ? "verify" : "pending";
        


                                        <tr style="height: 40px !important;" data-ward-id="@item.Ward" data-status="@status">
                                            <td style="text-align:right;">
                                                 @Html.DisplayFor(modelItem => item.RegistrationId)
                                            </td>
                                          @*   <td>
                                  
                                                @Html.DisplayFor(modelItem => item.FirstName)
                                    
                                            </td> *@
                                            <td style="text-align:left;">
                                                 @Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)
                                            </td>
                                            <td style="text-align:left;">
                                                @Html.DisplayFor(modelItem => item.Address)
                                            </td>
                          @*   <td style="text-align:left;">
    @{
        int itemWardId;
        bool isNumeric = int.TryParse(item.Ward.ToString(), out itemWardId);
        if (isNumeric)
        {
            foreach(var ward in ViewBag.wd)
            {
                if (@ward.Id == itemWardId)
                {
                    <text> @ward.Wardno-@ward.Wardname</text>
                    // Exit the loop once the matching ward is found
                    break;
                }
            }
        }
        else
        {
            <text> @item.Ward</text>
        }
    }
</td> *@
 <td style="text-align:left;">
                    @{
                        int itemWardId;
                        bool isNumeric = int.TryParse(item.Ward.ToString(), out itemWardId);
                        if (isNumeric)
                        {
                            foreach (var ward in ViewBag.wd)
                            {
                                if (ward.Id == itemWardId)
                                {
                                    <text>@ward.Wardno - @ward.Wardname</text>
                                    break; // Exit loop once the match is found
                                }
                            }
                        }
                        else
                        {
                            <text>@item.Ward</text>
                        }
                    }
                </td>

     <td style="text-align:left;">
                                                @Html.DisplayFor(modelItem => item.City)
                                            </td>
                                                              
                            <td style="text-align:left;">
    @{
        int itemContryId;
        bool isNumericc = int.TryParse(item.Country.ToString(), out itemContryId);
        if (isNumericc)
        {
            foreach(var country in 	ViewBag.cont)
            {
                if (@country.Id == itemContryId)
                {
                    <text> @country.Countrie</text>
                    // Exit the loop once the matching ward is found
                    break;
                }
            }
        }
        else
        {
            <text> @item.Country</text>
        }
    }
</td>

                                         @*    <td>
                                                @Html.DisplayFor(modelItem => item.Country)
                                            </td> *@
                                            <td style="text-align:right;">
                                                @Html.DisplayFor(modelItem => item.Phone)
                                                </td>
                                              <td style="text-align:right;">
                                                 @Html.DisplayFor(modelItem => item.AbroadPhone)
                                             </td>
                           
                        

                                           <td style="text-align:left;">
                                                        @Html.DisplayFor(modelitem => item.Gender)
                                            </td> 
                                            <td style="text-align:left;">
                                                @Html.DisplayFor(modelitem => item.Age)
                                            </td>
                                            <td style="text-align:left;">
                                                 @Html.DisplayFor(modelitem => item.DateOfBirth)
                                             </td>
                                            <td>
     
                    <a href="@Url.Action("Index", "UserProfileForAdmin", new { id = item.Id })" class="btn btn-sm btn-primary edit-link" style="color: white;">
    <i class="fa fa-eye" ></i> 
</a>

                               @*  @Html.ActionLink("Edit","Index", "Register", new {  id=item.Id },new { @class = "btn btn-sm btn-primary edit-link" })  *@
                              <a href="@Url.Action("Index", "Register", new { id = item.Id })" class="btn btn-sm btn-primary edit-link" style="color: white;">
    <i class="fas fa-edit" ></i> 
</a>



                                                        @* @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) | *@
                                                   @*@Html.ActionLink("Delete", "viewuser","User", new { onclick = "return confirm('Are you sure you want to delete this user?');" }) *@
                               @*   @Html.ActionLink("Delete", "Delete", "Delete", new { id = item.Id }, new { onclick = "return confirm('Are you sure you want to delete this user?');" ,@class = "btn btn-sm btn-danger edit-link" } )  *@
                               <a href="@Url.Action("Delete", "Delete", new { id = item.Id })" onclick="return confirm('Are you sure you want to delete this user?');" class="btn btn-sm btn-danger edit-link" style="color: white;">
    <i class="fas fa-trash"></i>
</a>


                                </td>

                                <td>

                                       <div id="codeDisplay">
@*     @{
        var userExistsDict = ViewBag.UserExists as Dictionary<string, bool>;
        var userVerificationDict = ViewBag.UserVerification as Dictionary<string, bool>;

        if (userExistsDict != null && userVerificationDict != null)
        {
            string itemId = item.Id.ToString();

            bool paymentExists = userExistsDict.ContainsKey(itemId) && userExistsDict[itemId];
            bool paymentVerified = userVerificationDict.ContainsKey(itemId) && userVerificationDict[itemId];

            if (paymentExists && paymentVerified)
            {
                <!-- If payment exists and is verified, display a "Verified" button -->
                <button  class="btn btn-sm btn-success Verif verified"  id="verified" disabled>Verified</button>
            }
            else if (paymentExists)
            {
                <!-- If payment exists but not verified, display a "Verify" button -->
                // <button class="btn btn-sm btn-danger verifyButton" id="verify" data-itemid="@item.Id" >Verify</button>
		 <button  class="btn btn-sm edit-link btn-danger contact verifyButton verify" id="verify" data-itemid="@item.Id">Verify</button>

            }
            else
            {
                <!-- If payment doesn't exist, display the "Pending" button -->
                // <button class="btn btn-sm btn-primary contact" id="contact" data-itemid="@item.Id">Pending</button>
                  <button  class="btn btn-sm btn-primary edit-link contact pending" id="contact" data-itemid="@item.Id">Pending</button>
            }
        }
    } *@
  @*    <td> *@
                @if (status == "verified")
                {
                    <button  class="btn btn-sm btn-success Verif verified"  id="verified" disabled>Verified</button>
                }
                else if (status == "verify")
                {
                    <button  class="btn btn-sm edit-link btn-danger contact verifyButton verify" id="verify" data-itemid="@item.Id">Verify</button>
                }
                else
                {
                     <button  class="btn btn-sm btn-primary edit-link contact pending" id="contact" data-itemid="@item.Id">Pending</button>
                }
          
</div>
                            </td>
<td>
   <a asp-controller="IdCard" asp-action="Index" asp-route-id="@item.Id" asp-route-filenames="Report">
    <i class="fas fa-file-pdf fa-lg" style="color: red; background-color: white;"></i>
</a>

</td>
<td>
   <a asp-controller="IdCard" asp-action="Index" asp-route-id="@item.Id" asp-route-filenames="HealthCard">
    <i class="fas fa-file-pdf fa-lg" style="color: red; background-color: white;"></i>
</a>

</td>

                            
                                        </tr>
                            }
                            
                                    </tbody>
                                </table>
                   </div>
                            </div>
                        </div>
                    </div>

    <script>

        function exportTableToPDF() {
            var pdf = new jsPDF();
            //pdf.text(20, 20, "Ward Data");
            var pageWidth = pdf.internal.pageSize.width;
            var text = "Ward Summary";
            var textWidth = pdf.getStringUnitWidth(text) * pdf.internal.getFontSize() / pdf.internal.scaleFactor;
            var x = (pageWidth - textWidth) / 2; // Center the text horizontally
            pdf.text(x, 20, text);
            var margins = { top: 30, left: 10, bottom: 20, right: 10 };
            pdf.autoTable({
                html: '#dataTable',
                startY: 25,
                theme: 'grid',
                columnStyles: {
                    0: { cellWidth: 60 },  // Adjust column width for column 0
                    1: { cellWidth: 60 },  // Adjust column width for column 1
                    2: { cellWidth: 60}  // Adjust column width for column 2
                   
                },
                bodyStyles: { lineColor: [1, 1, 1] },
                styles: { minCellHeight: 10 }
            });
            window.open(URL.createObjectURL(pdf.output("blob")))
        }


        // Export Table to Excel
        // function exportTableToExcel() {
        //     const table = document.getElementById('dataTable');
        //     const workbook = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
        //     XLSX.writeFile(workbook, 'UserList.xlsx');
        // }
        function exportTableToExcel() {
    const table = document.getElementById('dataTable');
    const visibleRows = Array.from(table.rows).filter(row => row.style.display !== 'none'); // Get only visible rows

    // Create a new table element with only visible rows
    const tempTable = document.createElement('table');
    visibleRows.forEach(row => {
        const clone = row.cloneNode(true); // Clone the visible row
        tempTable.appendChild(clone);
    });

    // Convert the temporary table to an Excel workbook
    const workbook = XLSX.utils.table_to_book(tempTable, { sheet: "Sheet1" });
    XLSX.writeFile(workbook, 'WardSummary.xlsx');
}

    </script>
                                            
                                     
 
</body>

<div class="contactForm" align="center"  style="display: none;">
        <h1>Make Payment!</h1>
        @*  <small>I'll get back to you as quickly as possible</small> *@
        <br />
        <br />
        <div>
             <input type="hidden"  id="hiddenTermId" name="hiddenTermId" value="">

        </div>
        <div>
            <input type="hidden" id="hiddenUserId" name="hiddenUserId" value="itemid">

        </div>

        @*     <div style="width: 300px;height: 80px;color: black;">
        <h6 class="m-0 font-weight-bold text-primary">v*@
             <h6 class="m-0 font-weight-bold text-primary">Term :</h6>
    
                   <input id="term" class="form-control"  value="" type="text" style="width:200px;height:20px;font-size: 15px;" required readonly> 

        <br />
        <br />
        <div>
            <h6 class="m-0 font-weight-bold text-primary">Amount :</h6>
      
    <input  id="amountInput" class="form-control" value="" type="number" style="width:200px;height:20px;font-size: 15px;" required readonly>
        </div>

    <div>
            <h6 class="m-0 font-weight-bold text-primary">Reference number :</h6>
      
    <input  id="referenceid" class="form-control" value="" type="text" style="width:200px;height:20px;font-size: 15px;" required>
        </div>
        
        <div style="width: 300px;height: 80px;color: black;">
            <h6 class="m-0 font-weight-bold text-primary"> Type :</h6>


            <select id="paymentType" class="form-control"  style="width:200px;height:30px;font-size: 15px;">


                <option class="custom-select" value="0">Cash</option>
                <option class="custom-select" value="1">Card</option>

            </select>
        </div>
        <div style="width: 300px;height: 80px;color: black;">
            <h6 class="m-0 font-weight-bold text-primary">
                Date :
            </h6>

            <input id="DateOfBirth" type="date" class="form-control" required style="width:200px;height:20px;font-size: 15px;" >
        </div>

        <input id="submitBtn" class="formBtn" type="submit" value="PAY" />
    </div>

    <!-- HTML for the new popup -->
<!-- HTML for the new popup -->
<div class="verifyPopup" style="display: none;">
    <h1>Verify Payment</h1>
     <div>
             <input type="hidden"  id="hiddenTermId" name="hiddenTermId" value="">

        </div>
        <div>
            <input type="hidden" id="hiddenUserId" name="hiddenUserId" value="itemid">

        </div>
    <div>
        <label for="referenceId">Reference ID:</label>
        <input type="text" id="referenceId" name="referenceId">
    </div>
    <div>
        <label for="transactionDate">Transaction Date:</label>
        <input type="date" id="transactionDate" name="transactionDate">
    </div>
    <div>
        <label for="term">Term:</label>
        <input type="text" id="term" name="term">
    </div>
    <div>
        <label for="amount">Amount:</label>
        <input type="number" id="amount" name="amount">
    </div>
    <button id="verifyPayment">Verify</button>
</div>

<!-- HTML for the verification popup -->


 

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"> </script>

   <Script type="text/javascript">
  

//  $(document).ready(function () {
//     var urlParams = new URLSearchParams(window.location.search);

//     var contactForm = $('.contactForm');

//     $('.contact').click(function (event) {
//         event.stopPropagation(); // Prevents the click event from propagating to the document body
//         contactForm.fadeToggle();
//     });

//     $(document).on('click', function (event) {
//         // Check if the clicked element is not inside the contactForm
//         if (!contactForm.is(event.target) && !$('.contact').is(event.target) && contactForm.has(event.target).length === 0) {
//             contactForm.fadeOut();
//         }
//     });
//     //  $(document).on('click', function (event) {
//     //     if (!$(event.target).closest('.contactForm, .verifyPopup').length) {
//     //         $('.contactForm, .verifyPopup').fadeOut();
//     //     }
//     // });

//     // $('#verifyButton').click(function () {
//     //     // Show the verification popup for payment
//     //     $('.verifyPopup').fadeIn();
//     // });
       
//         // Update the term and amount when the pay button is clicked
//         $('.contact').click(function () {
//               var itemId = $(this).data('itemid');
//     console.log("Item ID: " + itemId);
//             var selectedOption = document.getElementById('termSelect');
//            var selectedTermId = selectedOption.options[selectedOption.selectedIndex].value;
      
//            console.log("Selected TermId: " + selectedTermId);
           
//             var selectedTerm = selectedOption.options[selectedOption.selectedIndex].text;
//             console.log("Selected Term: " + selectedTerm); 
//             var selectedAmount = selectedOption.options[selectedOption.selectedIndex].getAttribute('data-amount');
            
//             // Update the term and amount displayed in the contact form
//             $('#term').val(selectedTerm);
//             $('#amountInput').val(selectedAmount);
//              $('#hiddenTermId').val(selectedTermId);
//             $('#hiddenUserId').val(itemId);
            

//         /*     $('#contactForm').fadeToggle(); */ // Show the contact form
//         });
//    $('#verifyPayment').click(function () {
//         // Show the verification popup
//         $('.verifyPopup').fadeIn();

//         // You can set default values or perform any other initialization here
//         // For example:
//         $('#referenceId').val('');
//         $('#transactionDate').val('');
//         $('#term').val('');
//     });

//         // Update the amount when the select box changes
//         $('#termSelect').change(function () {
            
//             var selectedAmount = $(this).find(':selected').data('amount');
//             $('#amountInput').val(selectedAmount);
//             var selectedTermId = $(this).find(':selected').val();
//               window.location.href = '/User/viewuser?Tid=' + selectedTermId;
//             $('#hiddenTermId').val(selectedTermId);
//             var selectedTerm = $(this).find(':selected').text();
//             $('#term').val(selectedTerm);
         
//         });
//     });
//    $('#submitBtn').click(function (e) {
//     e.preventDefault(); // Prevent default form submission behavior

//     // Get values from the form elements
//     var amount =  parseInt($('#amountInput').val());
//     var term = $('#term').val();
//     var type = parseInt( $('#paymentType').val());
//     var date = $('#DateOfBirth').val();
//     var TermId = parseInt($('#hiddenTermId').val());
//     var UserId =$('#hiddenUserId').val();

     
//        // var itemId = $('#contact').val();
//     // Create an object with the form data
//     var paymentData = {
//         Amount: amount,
//         Term: term,
//         Type: type,
//         Date: date,
//         TermId:TermId,
//         UserId: UserId

//     };
//     console.log(JSON.stringify(paymentData));
//     // Send data to the controller using AJAX
//     $.ajax({
//         url: "/api/FetchAmount", // Replace with your controller action URL
//         type: 'POST',
//         contentType: 'application/json',
//         data: JSON.stringify(paymentData),
       

//         success: function (response) {
//             // Handle success (if needed)
           
//             console.log(response);
//             // Redirect to Terms Index page after successful payment
//             window.location.href = '/User/viewuser';
//         },
//         error: function (xhr, textStatus, errorThrown) {
//             // Handle error (if needed)
//             console.log(xhr.responseText);
//         }
//     });
      
// });
    


 </script>
<script type="text/javascript">
    $(document).ready(function () {
        var urlParams = new URLSearchParams(window.location.search);

        var contactForm = $('.contactForm');
        var verifyPopup = $('.verifyPopup');

        // Attach event handler for clicking on the contact button
        $('.contact').click(function (event) {
            event.stopPropagation(); // Prevents the click event from propagating to the document body
            contactForm.fadeToggle();
            verifyPopup.hide(); // Hide the verifyPopup if it's currently open
            var selectedOption = document.getElementById('termSelect');
            var selectedTermId = selectedOption.options[selectedOption.selectedIndex].value;
            $('#hiddenTermId').val(selectedTermId);
        });

        // Attach event handler for clicking outside the contact form or verification popup to close them
        $(document).on('click', function (event) {
            // Check if the click occurred outside the contact form and outside the verification popup
            if ((!contactForm.is(event.target) && !$('.contact').is(event.target) && contactForm.has(event.target).length === 0) &&
                (!verifyPopup.is(event.target) && !$('.verifyButton').is(event.target) && verifyPopup.has(event.target).length === 0)) {
                contactForm.fadeOut();
                verifyPopup.fadeOut();
            }
        });

        // Attach event handler for clicking the "Verify" button
        $('.verifyButton').click(function (event) {
    event.stopPropagation(); // Prevents the click event from propagating to the document body

    // Retrieve the data-itemid attribute value
    var itemId = $(this).data('itemid');
    console.log("Item ID: " + itemId);

    // Retrieve the termId from the hidden field
    var termId = parseInt($('#hiddenTermId').val());
    console.log("Term ID: " + termId);

    // Redirect to the verification page with item ID and term ID as parameters
    window.location.href = "/Verification/Verify?id=" + itemId + "&tid=" + termId;

    // Hide the contact form if it's currently open
    $('.contactForm').hide();
});
        // Update the term and amount when the pay button is clicked
        $('.contact').click(function () {
            var itemId = $(this).data('itemid');
            console.log("Item ID: " + itemId);
            var selectedOption = document.getElementById('termSelect');
            var selectedTermId = selectedOption.options[selectedOption.selectedIndex].value;

            console.log("Selected TermId: " + selectedTermId);

            var selectedTerm = selectedOption.options[selectedOption.selectedIndex].text;
            console.log("Selected Term: " + selectedTerm);
            var selectedAmount = selectedOption.options[selectedOption.selectedIndex].getAttribute('data-amount');

            // Update the term and amount displayed in the contact form
            $('#term').val(selectedTerm);
            $('#amountInput').val(selectedAmount);
            $('#hiddenTermId').val(selectedTermId);
            $('#hiddenUserId').val(itemId);
        });

        // Update the amount when the select box changes
        $('#termSelect').change(function () {
            var selectedAmount = $(this).find(':selected').data('amount');
            $('#amountInput').val(selectedAmount);
            var selectedTermId = $(this).find(':selected').val();
            // Remove or modify the following line to prevent automatic redirection
             window.location.href = '/User/viewuser?Tid=' + selectedTermId;
            $('#hiddenTermId').val(selectedTermId);
            var selectedTerm = $(this).find(':selected').text();
            $('#term').val(selectedTerm);
        });

        // Handle form submission
        $('#submitBtn').click(function (e) {
            e.preventDefault(); // Prevent default form submission behavior

            // Get values from the form elements
            var amount = parseInt($('#amountInput').val());
            var term = $('#term').val();
            var type = parseInt($('#paymentType').val());
            var date = $('#DateOfBirth').val();
            var TermId = parseInt($('#hiddenTermId').val());
            var UserId = $('#hiddenUserId').val();
            var Referenceid=$('#referenceid').val();
            
            // Create an object with the form data
            var paymentData = {
                Amount: amount,
                Term: term,
                Type: type,
                Date: date,
                TermId: TermId,
                UserId: UserId,
                referenceid:Referenceid,
            };
             var formData = new FormData();
    formData.append("Amount", parseInt($('#amountInput').val()));
    formData.append("Term", $('#term').val());
    formData.append("Type", parseInt($('#paymentType').val()));
    formData.append("Date", $('#DateOfBirth').val());
    formData.append("TermId", parseInt($('#hiddenTermId').val()));
    formData.append("UserId", $('#hiddenUserId').val());
    formData.append("Referenceid", $('#referenceid').val());
     for (var pair of formData.entries()) {
        console.log(pair[0] + ': ' + pair[1]);
    }
           // console.log(JSON.stringify(paymentData));

            // Send data to the controller using AJAX
            $.ajax({
                url: "/api/FetchAmount", // Replace with your controller action URL
                type: 'POST',
                //contentType: 'application/json',
                //data: JSON.stringify(paymentData),
                 processData: false, // Important to prevent jQuery from processing the data
        contentType: false,  // Important to set the content type as false for FormData
                data: formData,
                success: function (response) {
                    // Handle success (if needed)
                    console.log(response);
                    // Redirect to Terms Index page after successful payment
                    window.location.href = '/User/viewuser';
                },
                error: function (xhr, textStatus, errorThrown) {
                    // Handle error (if needed)
                    console.log(xhr.responseText);
                }
            });
        });
    });
</script>
<script>
document.getElementById('toggle-button').addEventListener('click', function() {
  var stickyColumns = document.querySelectorAll('th:nth-child(1), th:nth-child(2), td:nth-child(1), td:nth-child(2)');
  stickyColumns.forEach(function(column) {
    column.classList.toggle('hidden');
  });
  
  var button = document.getElementById('toggle-button');
  if (button.textContent === '←') {
    button.textContent = '→';
  } else {
    button.textContent = '←';
  }
});
</script>

@* <script>
    function filterTable() {
        var selectedWardId = document.getElementById("wardFilter").value;
        var rows = document.querySelectorAll("table tbody tr");

        rows.forEach(function(row) {
            var wardId = row.getAttribute("data-ward-id");
            if (selectedWardId === "" || wardId === selectedWardId) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }
</script> *@
@* <script>
    function filterTable() {
        var selectedWardId = document.getElementById("wardFilter").value;
        var selectedStatus = document.getElementById("statusFilter").value;
        var rows = document.querySelectorAll("tbody tr");

        rows.forEach(function(row) {
            var rowWardId = row.getAttribute("data-ward-id");
            var rowStatus = row.getAttribute("data-status");

            // Check if the row matches the selected Ward and Status filters
            var wardMatch = !selectedWardId || rowWardId === selectedWardId;
            var statusMatch = !selectedStatus || rowStatus === selectedStatus;

            // Show row if both filters match, otherwise hide it
            if (wardMatch && statusMatch) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }
</script>
<script>
    function filterTable() {
    const searchInput = document.getElementById("searchInput").value.toLowerCase();
    const rows = document.querySelectorAll("table tbody tr");

    rows.forEach(row => {
        const rowText = row.textContent.toLowerCase();
        row.style.display = rowText.includes(searchInput) ? "" : "none";
    });
}
</script> *@
@* <script>
    function filterTable() {
    const searchInput = document.getElementById("searchInput").value.toLowerCase();
    const selectedWardId = document.getElementById("wardFilter").value;
    const selectedStatus = document.getElementById("statusFilter").value;
    const rows = document.querySelectorAll("tbody tr");

    rows.forEach(function(row) {
        const rowText = row.textContent.toLowerCase();
        const rowWardId = row.getAttribute("data-ward-id");
        const rowStatus = row.getAttribute("data-status");

        // Check if row matches search input, ward filter, and status filter
        const searchMatch = rowText.includes(searchInput);
        const wardMatch = !selectedWardId || rowWardId === selectedWardId;
        const statusMatch = !selectedStatus || rowStatus === selectedStatus;

        // Show row if it matches all criteria; otherwise, hide it
        row.style.display = (searchMatch && wardMatch && statusMatch) ? "" : "none";
    });
}

</script> *@
<script>
    function filterTable() {
        const searchInput = document.getElementById("searchInput").value.toLowerCase();
        const selectedWardId = document.getElementById("wardFilter").value;
        const selectedStatus = document.getElementById("statusFilter").value;
        const rows = document.querySelectorAll("tbody tr");

        rows.forEach(function(row) {
            const rowText = row.textContent.toLowerCase();
            const rowWardId = row.getAttribute("data-ward-id");
            const rowStatus = row.getAttribute("data-status");

            // Check if row matches search input, ward filter, and status filter
            const searchMatch = rowText.includes(searchInput);
            const wardMatch = !selectedWardId || rowWardId === selectedWardId;
            const statusMatch = !selectedStatus || rowStatus === selectedStatus;

            // Show row if it matches all criteria; otherwise, hide it
            row.style.display = (searchMatch && wardMatch && statusMatch) ? "" : "none";
        });
    }

    // Add event listeners to call filterTable when filters change
    document.getElementById("searchInput").addEventListener("input", filterTable);
    document.getElementById("wardFilter").addEventListener("change", filterTable);
    document.getElementById("statusFilter").addEventListener("change", filterTable);
</script>
